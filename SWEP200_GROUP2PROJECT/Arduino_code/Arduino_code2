// Define the pin numbers for each traffic light
const int redPin1 = 2;
const int yellowPin1 = 3;
const int greenPin1 = 4;

const int redPin2 = 5;
const int yellowPin2 = 6;
const int greenPin2 = 7;

const int redPin3 = 8;
const int yellowPin3 = 9;
const int greenPin3 = 10;

// Ultrasonic Sensor pins
const int trigPin1 = A0;
const int echoPin1 = A1;
const int trigPin2 = A2;
const int echoPin2 = A3;
const int trigPin3 = A4;
const int echoPin3 = A5;

void switchLane1ToRed(){
  digitalWrite(redPin1, HIGH);
  digitalWrite(yellowPin1, LOW);
  digitalWrite(greenPin1, LOW);
}

void switchLane1ToYellow(){
  digitalWrite(redPin1, LOW);
  digitalWrite(yellowPin1, HIGH);
  digitalWrite(greenPin1, LOW);
}

void switchLane1ToGreen(){
  digitalWrite(redPin1, LOW);
  digitalWrite(yellowPin1, LOW);
  digitalWrite(greenPin1, HIGH);
}

void switchLane1ToReadyToMove(){
  digitalWrite(redPin1, HIGH);
  digitalWrite(yellowPin1, HIGH);
  digitalWrite(greenPin1, LOW);
}

void switchLane2ToRed(){
  digitalWrite(redPin2, HIGH);
  digitalWrite(yellowPin2, LOW);
  digitalWrite(greenPin2, LOW);
}

void switchLane2ToYellow(){
  digitalWrite(redPin2, LOW);
  digitalWrite(yellowPin2, HIGH);
  digitalWrite(greenPin2, LOW);
}

void switchLane2ToGreen(){
  digitalWrite(redPin2, LOW);
  digitalWrite(yellowPin2, LOW);
  digitalWrite(greenPin2, HIGH);
}

void switchLane2ToReadyToMove(){
  digitalWrite(redPin2, HIGH);
  digitalWrite(yellowPin2, HIGH);
  digitalWrite(greenPin2, LOW);
}

void switchLane3ToRed(){
  digitalWrite(redPin3, HIGH);
  digitalWrite(yellowPin3, LOW);
  digitalWrite(greenPin3, LOW);
}

void switchLane3ToYellow(){
  digitalWrite(redPin3, LOW);
  digitalWrite(yellowPin3, HIGH);
  digitalWrite(greenPin3, LOW);
}

void switchLane3ToGreen(){
  digitalWrite(redPin3, LOW);
  digitalWrite(yellowPin3, LOW);
  digitalWrite(greenPin3, HIGH);
}

void switchLane3ToReadyToMove(){
  digitalWrite(redPin3, HIGH);
  digitalWrite(yellowPin3, HIGH);
  digitalWrite(greenPin3, LOW);
}


void setup() {
  Serial.begin(9600);
  Serial.println(" ------- Automatic Traffic Light Control based on Density --------");
  
  // Set the pin modes for traffic lights
  pinMode(redPin1, OUTPUT);
  pinMode(yellowPin1, OUTPUT);
  pinMode(greenPin1, OUTPUT);
  pinMode(redPin2, OUTPUT);
  pinMode(yellowPin2, OUTPUT);
  pinMode(greenPin2, OUTPUT);
  pinMode(redPin3, OUTPUT);
  pinMode(yellowPin3, OUTPUT);
  pinMode(greenPin3, OUTPUT);

  // Set the pin modes for the sensors
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);
  pinMode(trigPin3, OUTPUT);
  pinMode(echoPin3, INPUT);
}

void loop() {
  int distance1, distance2, distance3;

  // 1
  for (int t = 0; t < 30; t++) {
    distance1 = calculateDistance(trigPin1, echoPin1);
    switchLane1ToGreen();
    switchLane2ToGreen();
    switchLane3ToRed();
    delay(1000);

    // check to know if there is any car on the open lane
    if (distance1 > 10) {
      break;
    }
  }
  
  
  // 2
  for (int t = 0; t < 7; t++) {
    switchLane1ToYellow();
    switchLane2ToGreen();
    switchLane3ToRed();
    delay(1000);
  }
  
  
  // 3
  for (int t = 0; t < 20; t++) {
    distance2 = calculateDistance(trigPin2, echoPin2);
    switchLane1ToRed();
    switchLane2ToGreen();
    switchLane3ToRed();
    delay(1000);

    // check to know if there is any car on the open lane
    if (distance2 > 10) {
      break;
    }
  }
  
  
  // 4
  for (int t = 0; t < 7; t++) {
    switchLane1ToRed();
    switchLane2ToYellow();
    switchLane3ToReadyToMove();
    delay(1000);
  }
  
  
  // 5
  for (int t = 0; t < 20; t++) {
    distance3 = calculateDistance(trigPin3, echoPin3);
    switchLane1ToRed();
    switchLane2ToRed();
    switchLane3ToGreen();
    delay(1000);

    // check to know if there is any car on the open lane
    if (distance3 > 10) {
      break;
    }
  }
  
  
  // 6
  for(int t = 0; t < 7; t++) {
    switchLane1ToReadyToMove();
    switchLane2ToReadyToMove();
    switchLane3ToYellow();
    delay(1000);
  }  
}

int calculateDistance(int trigPin , int echoPin){
  long duration, distance;
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Measure the response from the HC-SR04 Echo Pin
  duration = pulseIn(echoPin, HIGH);
  
  // Determine the distance from duration
  distance = (duration / 2) * 0.0343;
  
  // Return the value of the distance
  return distance;
}
